var assert = require("assert"),
    epsilon = require("./utils/epsilon"),
    keyframes = require("../../lib/index"),
    JiboKeyframeInfo = require("../../lib/jibo-keyframe-info"),
    BodyLayerClass = require("../../lib/layers/body-layer"),
    expectedDofs = {
        topSection_r: Math.PI/2,
        middleSection_r: Math.PI,
        bottomSection_r: Math.PI*1.5
    }

describe('keyframes.runtime', function(){
    describe('.evaluateAllLayers()', function(){
        it('should return default generated dofs when there are no keyframes', function(){

            var newKeyframes = keyframes.runtime.create(JiboKeyframeInfo),
                dofs = keyframes.runtime.evaluateAllLayers(newKeyframes, JiboKeyframeInfo, 0.0);

            epsilon.equal(dofs.topSection_r, 0.0, 0.0001, "Incorrect topSection_r dof value");
            epsilon.equal(dofs.middleSection_r, 0.0, 0.0001, "Incorrect middleSection_r dof value");
            epsilon.equal(dofs.bottomSection_r, 0.0, 0.0001, "Incorrect bottomSection_r dof value");
        });

        it('should return blend body layers additively when there two or more body layers', function(){

            var newKeyframes = keyframes.runtime.create(JiboKeyframeInfo);

            // Add another layer and ensure it combines correctly
            newKeyframes.layers.push({
                name: "Second Body Layer",
                type: "Body",
                keyframes: [
                    {
                        time: 0,
                        value: {
                            Head: 90,
                            Torso: 180,
                            Pelvis: 270
                        }
                    }
                ]
            });

            var dofs = keyframes.runtime.evaluateAllLayers(newKeyframes, JiboKeyframeInfo, 0.0);

            epsilon.equal(dofs.topSection_r, expectedDofs.topSection_r, 0.0001, "Incorrect topSection_r dof value");
            epsilon.equal(dofs.middleSection_r, expectedDofs.middleSection_r, 0.0001, "Incorrect middleSection_r dof value");
            epsilon.equal(dofs.bottomSection_r, expectedDofs.bottomSection_r, 0.0001, "Incorrect bottomSection_r dof value");
        });
    });
});
